---
stages:
  - build
  - go

before_script:
  - export TAG=${CI_COMMIT_SHORT_SHA}
  - export BRANCH=${CI_COMMIT_REF_NAME}
  - export REGISTRY_HOST=${CI_REGISTRY}
  - export REGISTRY_URI="/${CI_PROJECT_PATH}"

spotlight.build:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -f Dockerfile . --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --build-arg GROUP_ID_NUMBER=55000
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  tags:
    - local

spotlight.lint:
  stage: go
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  variables:
    PRONTO_GITLAB_API_ENDPOINT: "https://gitlab.com/api/v4"
  before_script:
    - export PRONTO_GITLAB_API_PRIVATE_TOKEN=$GITLAB_API_TOKEN
  allow_failure: true
  script:
    - git fetch && git checkout main && git checkout ${CI_COMMIT_SHORT_SHA}
    - bundle check || bundle
    - bundle exec pronto run -f gitlab -c origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - cd /app/spotlight && bin/rubocop -P
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  tags:
    - docker

spotlight.test:
  stage: go
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  services:
    - name: postgres:latest
    - name: solr:8.8
      command:
        - "sh -c 'mkdir -p /tmp/spotlightconf && cd /tmp/spotlightconf && wget old.notch8.com/harvardspotlightconf.tgz && tar zxfv harvardspotlightconf.tgz && solr-precreate spotlight /tmp/spotlightconf'"
  variables:
    IN_DOCKER: "true"
    POSTGRES_DB: spotlight_test
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: spotlight_password
    POSTGRES_USER: spotlight_user
    RAILS_ENV: test
  allow_failure: true
  before_script:
    - rm -f /app/spotlight/tmp/capybara/*
    - rm -rf $CI_PROJECT_DIR/capybara
    - cd /app/spotlight
    - bin/rails db:create db:migrate
  script:
    - bin/rspec --format progress --format RspecJunitFormatter --out rspec.xml
  after_script:
    - test -e /app/spotlight/tmp/capybara && cp -r /app/spotlight/tmp/capybara $CI_PROJECT_DIR/capybara
    - test -e /app/spotlight/rspec.xml && cp /app/spotlight/rspec.xml $CI_PROJECT_DIR/rspec.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  artifacts:
    when: always
    paths:
      - capybara/*.html
      - rspec.xml
    reports:
      junit: rspec.xml
  tags:
    - docker

spotlight.staging:
  stage: go
  extends:
    - .deploy
  variables:
    DEPLOY_IMAGE: $CI_REGISTRY_IMAGE
    DEPLOY_TAG: $CI_COMMIT_SHORT_SHA
    HELM_EXTRA_ARGS: >
      --values ops/staging-values.yaml
  script:
    - envsubst < ops/staging-values.tmpl.yaml > ops/staging-values.yaml
    - ./ops/chart/bin/helm_deploy staging-harvard-curiosity staging-harvard-curiosity
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  tags:
    - docker

.deploy:
  image: dtzar/helm-kubectl:3.5.3
